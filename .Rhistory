source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
p
obs
temp
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
mu = 0.03
lambda = 0
alpha = 1
gamma = 2
penalty = "lasso"
eps = 1e-7
s = 1
niter = 100
rho = 10
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
S = crossprod(scale(X, center = TRUE, scale = FALSE)) / n
L = t(chol(S))
x = y  = matrix(1, nrow = p)
Z = matrix(1, nrow = p, ncol = p)
P = matrix(1 / p, p, p)
z = 1
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
debug(updateP)
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
undebug(updateP)
debug(perm.proj)
perm.proj(P, rep = 100, S, L, mu, diag(p))
P
P
obj.store
rep
i
i
i
i
i
min
min
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
x
y
Z
z
n.iter
print(s)
S
L
diag(1 / sqrt(diag(S)))
mu
eps
alpha
lambda
gamma
print(gamma)
penalty
P
debug(perm.proj)
updateP(x, y, Z, z, n.iter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, P)
n.iter
x
y
x = y = matrix(1, nrow = p)
Z = matrix(1, nrow = p, ncol = p)
z = 1
P = matrix(1 / p, p, p)
S <- crossprod(scale(X, center = TRUE, scale = FALSE)) / obs ## Covariance matrix
L = init = diag(1 / sqrt(diag(S)))   ## Initial value for CSCS
iter = 1
converged = FALSE
old.obj = 1e+8
err = c()
p <- dim(X)[2]
obs <-dim(X)[1]
updateP(x, y, Z, z, n.iter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, P)
n.iter = 100
updateP(x, y, Z, z, n.iter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, P)
obj.store
rep
updateP(x, y, Z, z, n.iter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, P)
debug(dagrrcf)
debug(perm.proj)
debug(updateP)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
rm(list = ls())
# perm.proj <- function(D, rep = 100, S, L, mu, P_old)
# {
#       p = dim(D)[1]
#       obj.store = c()
#       i = 1
#       # old.obj = subobj.function(P_old, S, L, mu)
#       #old.obj = subobj.function(P_old, S, L, mu)
#       min = 1e+8
#       P = P_old
#       while((i < rep))
#       {
#             x = runif(p)
#             rnk_x = rank(x, ties.method = "random")
#             rnk_Dx = rank(D %*% x, ties.method = "random")
#             ind = match(rnk_Dx, rnk_x)
#             obj.store = subobj.function(P = ind, S, L, mu)
#             if  ((obj.store < min))
#             {
#                   min = obj.store
#                   P = ind
#             }
#             i = i + 1
#       }
#       return(P)
# }
perm.proj <- function(D, rep = 100, S, L, mu, P_old, maj.rule = FALSE)
{
p = dim(D)[1]
obj.store = c()
i = 1
# old.obj = subobj.function(P_old, S, L, mu)
#old.obj = subobj.function(P_old, S, L, mu)
min = 1e+8
P = P_old
while((i < rep))
{
x = sort(runif(p))
#            rnk_x = rank(x, ties.method = "random")
rnk_Dx = rank(D %*% x, ties.method = "random")
ind = rnk_Dx
P = diag(p)[,ind]
obj.store = subobj.function(P = P, S, L, mu)
if  ((obj.store < min))
{
min = obj.store
P = ind
}
i = i + 1
}
return(P)
}
obj.function <- function(P, S, L, mu, gamma = 2, lambda = 0, penalty = c("lasso", "MCP"))
{
p <- dim(S)[1]
one.vec <- matrix(1, p)
Pii <-  diag(1, p)  - 1/p * tcrossprod(one.vec, one.vec)
if(penalty == "lasso")
{
obj <- 1 / 2 * sum(diag(P %*% S %*% t(P) %*% crossprod(L))) - sum(log(diag(L)))  + lambda * sum(abs(L - diag(diag(L))))
- mu / 2 * sum((Pii %*% P)^2)
}else{
row_sum = 0
for ( i in 2:p)
{
index = 1 : i
row_sum = row_sum + rho(L[1, index], lambda = lambda, gamma = gamma)
}
obj <- 1 / 2 * sum(diag(P %*% S %*% t(P) %*% crossprod(L))) - sum(log(diag(L)))  + row_sum  - mu / 2 * sum((Pii %*% P)^2)
}
return(obj)
}
subobj.function <- function(P, S, L, mu)
{
p <- dim(S)[1]
one.vec <- matrix(1, p)
Pii <-  diag(1, p)  - 1/p * tcrossprod(one.vec, one.vec)
obj <- 1 / 2 * sum(diag(P %*% S %*% t(P) %*% crossprod(L))) - mu / 2 * sum((Pii %*% P)^2)
return(obj)
}
updateP<- function(x, y, Z,z, niter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, perm.rep = 500)
{
P_proj = matrix(1 / p, p, p)
iter = 1
converged = FALSE
err = c()
while((converged == FALSE) & (iter < niter))
{
s = s / iter
P_old = P_proj
P_0 = P_old - s * gradient(S, P_old, L, mu)
## Projection step
proj = proj.ds(P_0, x, y, Z, z, n.iter = 5000, eps = eps)
D_proj = proj$P
## For warm start
x = proj$x
y = proj$y
Z = proj$Z
z = proj$z
P_proj = P_old + alpha * (D_proj - P_old) ## Update P
old.obj = obj.function(P_old, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
new.obj = obj.function(P_proj, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
#          cat("error is ",abs(old.obj - new.obj), "\n" )
if (abs(old.obj - new.obj) < eps)
{
converged = TRUE
}else{
iter = iter + 1
}
}
## Project into permutation matrix space
ord = perm.proj(P_proj, rep = perm.rep, S, L, mu, P_old, maj.rule = FALSE)
P = diag(p)[ord, ]
return(list(P = P, ord = ord))
}
gradient <- function(S, P, L, mu)
{
p <- dim(S)[1]
one.vec <- matrix(1,nrow = p, ncol = 1)
#  P.mat = as(as.integer(P),"pMatrix")
#  P = diag(p)[P,]
Pii <-  diag(1, p) - 1 / p * tcrossprod(one.vec, one.vec)
grad_f = crossprod(L) %*% P%*% S - mu * Pii %*% P
return(grad_f)
}
proj.ds <- function(P_0, x, y, Z, z, n.iter = 1000, eps = 1e-12)
{
k = 1
n = dim(P_0)[1]
one.vec = matrix(1, nrow = n)
converged = FALSE
P_0 = as.matrix(P_0)
## Initial value for dual variables
err = c()
D =   matrix(0, n, 1)
D[1] = 1
D[n] = -1
delta = 1
g = matrix(1 : n, n , 1)
while ((converged == FALSE)&& (k <= n.iter))
{
## Update dual variables
Z = pmax(matrix(0,n,n), (tcrossprod(x, one.vec) + tcrossprod(one.vec, y) - P_0 + z * D %*% t(g)))
x = (1 / n) * (P_0 %*% one.vec - (sum(y) + 1) * one.vec + Z %*% one.vec - z * D * as.numeric(crossprod(g, one.vec)))
y = (1 / n) * (t(P_0) %*% one.vec - (sum(x) + 1) * one.vec +t(Z) %*% one.vec - z * g * as.numeric(crossprod(D, one.vec)))
z = (1 / sum(g^2)) * max(0, (crossprod(D, (Z + P_0)) %*% g + delta - crossprod(D, x) * as.numeric(crossprod(g, one.vec)) +
crossprod(D, one.vec) * as.numeric(crossprod(g, y))) / crossprod(D) )
P = P_0 - tcrossprod(x, one.vec) - tcrossprod(one.vec, y) + Z  - z * D %*% t(g)## Recunstruct primal from dual
err[k] = abs(primal.obj(P, P_0) - dual.obj(x, y, Z, P_0, z))
#          cat("inner error is ", err[k], "\n")
if (err[k] <= eps)
{
converged = TRUE
}else{
k = k + 1
}
}
return = list(P = P, x = x, Z = Z, y = y, err = err, z = z )
return(return)
}
primal.obj <- function (P, P_0)
{
obj = 1/2 * sum((P - P_0)^2)
return(obj)
}
dual.obj <- function(x, y, Z, P_0 , z)
{
n = length(x)
one.vec = matrix(1, nrow = n)
D  =  matrix(0, n, 1)
D[1] = 1
D[n] = -1
delta = 1
g = matrix(1 : n, n ,1 )
obj = -1 / 2 * sum((tcrossprod(x, one.vec) + tcrossprod(one.vec, y) - Z + z * D %*% t(g))^2) - sum(diag(crossprod(Z, P_0))) +
crossprod(x, (P_0 %*% one.vec - one.vec)) + crossprod(y, (crossprod(P_0, one.vec) - one.vec)) +
z * (crossprod(D, P_0) %*% g + delta)
return(as.numeric(obj))
}
########### TEst the function
source("C:\\Users\\armop\\Dropbox\\PHD\\Research\\CholeskyOrder\\Code\\EqVarDAG-master\\Experiments\\sims_low.R")
p = 10
n <- 150
prob = 0.3
library(igraph)
#dag<-erdos.renyi.game(n = p, p.or.m = 30, type = c("gnm"), directed = TRUE)
gD = get_DAGdata(n, p, prob)
X = gD$X
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/relaxed_chol.R')
debug(dagrrcf)
debug(perm.proj)
debug(updateP)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
p
matrix(1, nrow = p)
undebug(perm.proj)
undebug(dagrrcf)
undebug(perm.proj)
undebug(updateP)
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
########### TEst the function
source("C:\\Users\\armop\\Dropbox\\PHD\\Research\\CholeskyOrder\\Code\\EqVarDAG-master\\Experiments\\sims_low.R")
p = 10
n <- 150
prob = 0.3
library(igraph)
#dag<-erdos.renyi.game(n = p, p.or.m = 30, type = c("gnm"), directed = TRUE)
gD = get_DAGdata(n, p, prob)
gD$truth
X = gD$X
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/relaxed_chol.R')
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
temp
debug(perm.proj)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
x
y
Z
z
n.iter
L
mu
alpha
lambda
gamma
penalty
P
D
p
P
P
debug(updateP)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
P_proj
mu = 0.03
lambda = 0
alpha = 1
gamma = 2
penalty = "lasso"
eps = 1e-7
s = 1
niter = 100
rho = 10
debug(perm.proj)
P
P = matrix(1 / p, p, p)
z = 1
perm.proj(P, rep = 100, S, L, mu, diag(p))
rep
i
undebug(perm.proj)
perm.proj(P, rep = 100, S, L, mu, diag(p))
S = crossprod(scale(X, center = TRUE, scale = FALSE)) / n
L = t(chol(S))
perm.proj(P, rep = 100, S, L, mu, diag(p))
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
undebug(updateP)
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
x = y  = matrix(1, nrow = p)
Z = matrix(1, nrow = p, ncol = p)
P = matrix(1 / p, p, p)
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)$ord
gamma
penalty
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)
x
x = y  = matrix(1, nrow = p)
Z = matrix(1, nrow = p, ncol = p)
P = matrix(1 / p, p, p)
P_est = updateP(x, y, Z, z,niter, s = 1, S, L, mu, eps, alpha, lambda, gamma, penalty)
P_est
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
undebug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
updateP<- function(x, y, Z,z, niter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, perm.rep = 500, initP = NULL)
{
if (is.null(P.init))
{
P_proj = matrix(1 / p, p, p)
}else{
P_proj = P.init
}
P_proj = matrix(1 / p, p, p)
iter = 1
converged = FALSE
err = c()
while((converged == FALSE) & (iter < niter))
{
s = s / iter
P_old = P_proj
P_0 = P_old - s * gradient(S, P_old, L, mu)
## Projection step
proj = proj.ds(P_0, x, y, Z, z, n.iter = 5000, eps = eps)
D_proj = proj$P
## For warm start
x = proj$x
y = proj$y
Z = proj$Z
z = proj$z
P_proj = P_old + alpha * (D_proj - P_old) ## Update P
old.obj = obj.function(P_old, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
new.obj = obj.function(P_proj, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
#          cat("error is ",abs(old.obj - new.obj), "\n" )
if (abs(old.obj - new.obj) < eps)
{
converged = TRUE
}else{
iter = iter + 1
}
}
## Project into permutation matrix space
P = perm.proj(P_proj, rep = perm.rep, S, L, mu, P_old)
#P = diag(p)[ord, ]
return(P)
}
updateP<- function(x, y, Z,z, niter, s, S, L, mu, eps, alpha, lambda, gamma, penalty, perm.rep = 500, initP = NULL)
{
if (is.null(P.init))
{
P_proj = matrix(1 / p, p, p)
}else{
P_proj = P.init
}
iter = 1
converged = FALSE
err = c()
while((converged == FALSE) & (iter < niter))
{
s = s / iter
P_old = P_proj
P_0 = P_old - s * gradient(S, P_old, L, mu)
## Projection step
proj = proj.ds(P_0, x, y, Z, z, n.iter = 5000, eps = eps)
D_proj = proj$P
## For warm start
x = proj$x
y = proj$y
Z = proj$Z
z = proj$z
P_proj = P_old + alpha * (D_proj - P_old) ## Update P
old.obj = obj.function(P_old, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
new.obj = obj.function(P_proj, S, L, mu, lambda = lambda, gamma = gamma, penalty = penalty)
#          cat("error is ",abs(old.obj - new.obj), "\n" )
if (abs(old.obj - new.obj) < eps)
{
converged = TRUE
}else{
iter = iter + 1
}
}
## Project into permutation matrix space
P = perm.proj(P_proj, rep = perm.rep, S, L, mu, P_old)
#P = diag(p)[ord, ]
return(P)
}
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
rm(list = ls())
########### TEst the function
source("C:\\Users\\armop\\Dropbox\\PHD\\Research\\CholeskyOrder\\Code\\EqVarDAG-master\\Experiments\\sims_low.R")
p = 10
n <- 150
prob = 0.3
library(igraph)
#dag<-erdos.renyi.game(n = p, p.or.m = 30, type = c("gnm"), directed = TRUE)
gD = get_DAGdata(n, p, prob)
X = gD$X
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/convex_relaxation.R')
source('C:/Users/armop/Dropbox/PHD/Research/Thesis/DAGs/RRCF/R/relaxed_chol.R')
X = gD$X
debug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
undebug(dagrrcf)
dagrrcf(X, mu = 0.03 , alpha = 1, s = 2, lambda = 0, gamma = 2, n.iter = 100, n.iter.proj = 100,
eps = 1e-4, penalty = c("lasso"), perm.rep = 100, refine = FALSE,
ref.alpha = 0.001, BH = TRUE)
